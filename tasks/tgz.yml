---
- name: Checking for existing install in {{ node_install_bin_dir }}
  become: true
  ansible.builtin.stat:
    path: '{{ node_install_bin_dir }}'
  changed_when: false
  register: node_binary
- name: Downloading and installing node
  when: not node_binary.stat.exists
  block:
    - name: Downloading {{ node_tgz_url }}
      become: true
      become_user: root
      ansible.builtin.get_url:
        url: '{{ node_tgz_url }}'
        dest: '{{ node_tmp_tgz }}'
        mode: '644'
        checksum: '{{ node_checksum }}'
        timeout: '{{ node_dl_timeout }}'

    - name: Unarchiving into {{ node_parent_install_dir }}
      become: true
      become_user: root
      ansible.builtin.unarchive:
        remote_src: true
        src: '{{ node_tmp_tgz }}'
        dest: '{{ node_parent_install_dir }}'
        creates: '{{ node_install_bin_dir }}'

  always:
    - name: Cleanup {{ node_tmp_tgz }}
      become: true
      become_user: root
      ansible.builtin.file:
        path: '{{ node_tmp_tgz }}'
        state: absent

- name: Linking executables in {{ node_link_dir }} to {{ node_install_bin_dir }}
  become: true
  become_user: root
  with_items: '{{ node_exes }}'
  ansible.builtin.file:
    src: '{{ node_install_bin_dir }}/{{ item }}'
    dest: '{{ node_link_dir }}/{{ item }}'
    state: link
